@using Application.Models.Chat
@using Application.Services.DataBaseServices
@using Application.Services.DataBaseServices.Interfaces
@using DataBase.Context
@using DataBase.CRUD.Repositories
@using DataBase.Models
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model ChatViewModel
@{
    Layout = null;
    IUserService userService = new UserService(new UserRepository());
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link rel="stylesheet" href="~/css/chat.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
<div class="container">
    <div class="sidebar">
        <div class="search-bar">
            <input type="text" placeholder="Search contacts">
        </div>
        <div class="contact-list">
            @if (Model.Contacts != null)
            {
                foreach (var contact in Model.Contacts)
                {
                    <a asp-controller="Chat" asp-action="Index" asp-route-id="@contact.ChatDetailId">
                        <div class="contact">@contact.Login</div>
                    </a>
                }
            }
        </div>
        <form asp-controller="Chat" asp-action="AddChat" method="get" class="newChatButton">
            <button class="floating-button">+</button>
        </form>
    </div>
    <div class="chat">
        @if (Model.CurrentChat != null)
        {
            TempData["ChatId"] = Model.CurrentChat.Id;
            var user1 = await userService.Get(Model.CurrentChat.User_1Id);
            var user2 = await userService.Get(Model.CurrentChat.User_2Id);

            <div class="chat-header">
                @((user1.Login == Model.User.Login) ? user2.Login : user1.Login)
                <a asp-controller="Chat" asp-action="DeleteChat" class="delete-chat">
                    <i class="fas fa-trash-alt"></i>
                </a>
            </div>
            <div id="chatWindow" class="chat-window">
                @foreach (var item in Model.Messages)
                {
                    <div class="@(item.UserId == Model.User.Id ? "message mine" : "message theirs")">
                        <div class="text">@item.MessageContent</div>
                        <div class="date">@item.MessageDate</div>
                    </div>
                }
            </div>

            <form id="sendMessageForm" class="message-input">
                <input type="text" id="messageInput"/>
                <button type="submit">Send</button>
            </form>
        }
    </div>
</div>

<script src="~/js/search.js"></script>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.start().then(function () {
        console.log("SignalR connected");

        const chatId = '@Model.CurrentChat?.Id';
        if (chatId) {
            connection.invoke("JoinChat", chatId).catch(function (err) {
                console.error(err.toString());
            });
        } else {
            console.error("chatId is null or undefined");
        }
    }).catch(function (err) {
        console.error(err.toString());
    });

    document.getElementById("sendMessageForm").addEventListener("submit", function (event) {
        event.preventDefault();
        const message = document.getElementById("messageInput").value;
        if (!message || message.trim() === '') return;

        const userId = '@Model.User.Id';
        const chatId = '@Model.CurrentChat?.Id';

        connection.invoke("SendMessage", userId, chatId, message).catch(function (err) {
            return console.error(err.toString());
        });
        console.log("Message sent " + message + " " + chatId + " ");
        document.getElementById("messageInput").value = '';
    });

    connection.on("ReceiveMessage", function (userId, message) {
        const chatWindow = document.getElementById("chatWindow");
        const messageDiv = document.createElement("div");
        console.log(message + " " + "received");
        messageDiv.classList.add("message", userId === '@Model.User.Id' ? "mine" : "theirs");
        messageDiv.innerHTML = `
            <div class="text">${message}</div>
            <div class="date">${new Date().toLocaleString()}</div>`;
        chatWindow.appendChild(messageDiv);
    });
</script>

</body>
</html>